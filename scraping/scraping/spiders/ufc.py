"""this File scrapes all athletes data from ufc.com"""import csvimport copyimport jsonimport loggingimport timefrom socket import timeoutimport requestsimport scrapyfrom datetime import datetimelogging.basicConfig(filename='ufc.log', filemode='w', format='%(name)s - %(levelname)s - %(message)s')# headers required to make post request to ufc.comheaders = {    'accept': 'application/json, text/javascript, */*; q=0.01',}fights=[]# post request data to get athletes and fightsdata_template = {    'view_name': 'all_athletes',    'view_display_id': 'page',    'view_base_path': '',    'pager_element': 0,    'filters%5B0%5D': 'status%3A23',    'gender': 'All',    'page': '0'}fights_data_template = {    'view_name': 'athlete_results',    'view_display_id': 'entity_view_1',    'view_args': '28236/28236',    'view_path': '',    'view_dom_id': '8621e20be913ec2dc0ff1b4b5f7f347441e89e19fc201a2f9f402b1cdaf0cb8f',    'pager_element': '0',    'page': '0',}csv_header = ['name', 'Match_Date', 'Fighter 1','odds 1', 'Fighter 2', 'odds 2', 'Red Corner', 'Blue Corner', 'Winner', 'method victory',              'EventId', 'FightId', 'CurrentRound', 'MaxRounds', 'CurrentRoundTime', 'Status', 'Accolade', 'Referee',              'WeightClass', 'FightersRedName', 'FightersRedID', 'FightersBlueName', 'FightersBlueID', 'Red_KD',              'Blue_KD', 'Red_SigStrikeatt', 'Red_SigStrikeldd', 'Blue_SigStrikeldd', 'Blue_SigStrikeatt',              'Blue_DisBodyPunchesldd', 'Red_totalstrikesldd', 'Red_totalstrikesatt', 'Blue_totalstrikesldd',              'Blue_totalstrikesatt', 'Red_Punchldd', 'Red_Punchatt', 'Blue_Punchldd', 'Blue_Punchatt', 'Red_Kicksldd',              'Blue_Kicksldd', 'Red_Kicksatt', 'Blue_Kicksatt', 'Red_Distanceldd', 'Red_Distanceatt',              'blue_Distanceatt', 'blue_Distanceldd', 'Red_ClinchSigStrikesldd', 'Red_ClinchSigStrikesatt',              'Blue_ClinchSigStrikesldd', 'Blue_ClinchSigStrikesatt', 'Red_GroundSigStrikesldd',              'Red_GroundSigStrikesatt', 'Blue_GroundSigStrikesldd', 'Blue_GroundSigStrikesatt',              'Red_ClinchTotalStrikesldd', 'Red_ClinchTotalStrikesatt', 'Blue_ClinchTotalStrikesldd',              'Blue_ClinchTotalStrikesatt', 'Red_GroundTotalStrikesldd', 'Red_GroundTotalStrikesatt',              'Blue_GroundTotalStrikesldd', 'Blue_GroundTotalStrikesatt', 'Red_HeadSigStrikesldd',              'Red_HeadSigStrikesatt', 'Blue_HeadSigStrikesatt', 'Blue_HeadSigStrikesldd', 'Red_BodySigStrikesldd',              'Red_BodySigStrikesatt', 'Blue_BodySigStrikesldd', 'Blue_BodySigStrikesatt', 'Red_LegsSigStrikesldd',              'Red_LegsSigStrikesatt', 'Blue_LegsSigStrikesldd', 'Blue_LegsSigStrikesatt', 'Red_HeadTotalStrikesldd',              'Red_HeadTotalStrikesatt', 'Blue_HeadTotalStrikesldd', 'Blue_HeadTotalStrikesatt',              'Red_BodyTotalStrikesldd', 'Red_BodyTotalStrikesatt', 'Blue_BodyTotalStrikesldd',              'Blue_BodyTotalStrikesatt', 'Red_LegsTotalStrikesldd', 'Red_LegsTotalStrikesatt',              'Blue_LegsTotalStrikesldd', 'Blue_LegsTotalStrikesatt', 'Red_DisHeadStrikesldd', 'Red_DisHeadStrikesatt',              'Blue_DisHeadStrikesatt', 'Blue_DisHeadStrikesldd', 'Red_DisBodyStrikesldd', 'Red_DisBodyStrikesatt',              'Blue_DisBodyStrikesatt', 'Blue_DisBodyStrikesldd', 'Red_DisLegsStrikesldd', 'Red_DisLegsStrikesatt',              'Blue_DisLegsStrikesatt', 'Blue_DisLegsStrikesldd', 'Red_ClinchHeadStrikesldd',              'Red_ClinchHeadStrikesatt', 'Blue_ClinchHeadStrikesatt', 'Blue_ClinchHeadStrikesldd',              'Red_ClinchBodyStrikesldd', 'Red_ClinchBodyStrikesatt', 'Blue_ClinchBodyStrikesatt',              'Blue_ClinchBodyStrikesldd', 'Red_ClinchLegsStrikesldd', 'Red_ClinchLegsStrikesatt',              'Blue_ClinchLegsStrikesatt', 'Blue_ClinchLegsStrikesldd', 'Red_GroundHeadStrikesldd',              'Red_GroundHeadStrikesatt', 'Blue_GroundHeadStrikesatt', 'Blue_GroundHeadStrikesldd',              'Red_GroundBodyStrikesldd', 'Red_GroundBodyStrikesatt', 'Blue_GroundBodyStrikesatt',              'Blue_GroundBodyStrikesldd', 'Red_GroundLegsStrikesldd', 'Red_GroundLegsStrikesatt',              'Blue_GroundLegsStrikesatt', 'Blue_GroundLegsStrikesldd', 'Red_DisHeadKicksldd', 'Red_DisHeadKicksatt',              'Blue_DisHeadKicksatt', 'Blue_DisHeadKicksldd', 'Red_DisBodyKicksldd', 'Red_DisBodyKicksatt',              'Blue_DisBodyKicksatt', 'Blue_DisBodyKicksldd', 'Red_DisLegKicksldd', 'Red_DisLegKicksatt',              'Blue_DisLegKicksatt', 'Blue_DisLegKicksldd', 'Red_DisHeadPunchesldd', 'Red_DisHeadPunchesatt',              'Blue_DisHeadPunchesatt', 'Blue_DisHeadPunchesldd', 'Red_DisBodyPunchesldd', 'Red_DisBodyPunchesatt',              'Blue_DisBodyPunchesatt', 'Red_ClinchSigKicksldd', 'Red_ClinchSigKicksatt', 'Blue_ClinchSigKicksatt',              'Blue_ClinchSigKicksldd', 'Red_ClinchSigPunchesldd', 'Red_ClinchSigPunchesatt',              'Blue_ClinchSigPunchesatt', 'Blue_ClinchSigPunchesldd', 'Red_GroundSigPunchesldd',              'Red_GroundSigPunchesatt', 'Blue_GroundSigPunchesatt', 'Blue_GroundSigPunchesldd',              'Red_GroundSigKicksldd', 'Red_GroundSigKicksatt', 'Blue_GroundSigKicksatt', 'Blue_GroundSigKicksldd',              'Red_TDGraplingldd', 'Red_TDGraplingatt', 'Blue_TDGraplingatt', 'Blue_TDGraplingldd',              'Red_SubGraplingatt', 'Blue_SubGraplingatt', 'Red_RevGraplingldd', 'Blue_RevGraplingldd',              'Red_StandupsGraplingldd', 'Blue_StandupsGraplingldd']csv_file = open("ufcdata_new.csv", 'w', newline='')writer = csv.DictWriter(csv_file, fieldnames=csv_header)writer.writeheader()# f = open("ufc_com.txt", "w")def str_int(value):    if (value.isdigit()):        return int(value)    else:        return 0def get_dict_value(data, key_list, default=''):    """    gets a dictionary and key_list, apply key_list sequentially on dictionary and return value    :param data: dictionary    :param key_list: list of key    :param default: return value if key not found    :return:    """    for key in key_list:        if data and isinstance(data, dict):            data = data.get(key, default)        else:            return default    return datadef get_fight_data(link, name, event_date, fid ):    """    this function gets fight details and save in a text file named ufc_com.txt    :param link: fight link    :param name: athlete name    :param event_date: fight date    :return:    """    Red_KD = 0    Blue_KD = 0    Red_sigstrikesldd = 0    Red_sigstrikesatt = 0    Blue_sigstrikesldd = 0    Blue_sigstrikesatt = 0    Red_totalstrikesldd = 0    Red_totalstrikesatt = 0    Blue_totalstrikesldd = 0    Blue_totalstrikesatt = 0    Red_Punchldd = 0    Red_Punchatt = 0    Blue_Punchldd = 0    Blue_Punchatt = 0    Red_Kicksldd = 0    Blue_Kicksldd = 0    Red_Kicksatt = 0    Blue_Kicksatt = 0    Red_Distanceldd = 0    Red_Distanceatt = 0    blue_Distanceldd = 0    blue_Distanceatt = 0    Red_ClinchSigStrikesldd = 0    Red_ClinchSigStrikesatt = 0    Blue_ClinchSigStrikesldd = 0    Blue_ClinchSigStrikesatt = 0    Red_GroundSigStrikesldd = 0    Red_GroundSigStrikesatt = 0    Blue_GroundSigStrikesldd = 0    Blue_GroundSigStrikesatt = 0    Red_ClinchTotalStrikesldd = 0    Red_ClinchTotalStrikesatt = 0    Blue_ClinchTotalStrikesldd = 0    Blue_ClinchTotalStrikesatt = 0    Red_GroundTotalStrikesldd = 0    Red_GroundTotalStrikesatt = 0    Blue_GroundTotalStrikesldd = 0    Blue_GroundTotalStrikesatt = 0    Red_HeadSigStrikesldd = 0    Red_HeadSigStrikesatt = 0    Blue_HeadSigStrikesatt = 0    Blue_HeadSigStrikesldd = 0    Red_BodySigStrikesldd = 0    Red_BodySigStrikesatt = 0    Blue_BodySigStrikesldd = 0    Blue_BodySigStrikesatt = 0    Red_LegsSigStrikesldd = 0    Red_LegsSigStrikesatt = 0    Blue_LegsSigStrikesldd = 0    Blue_LegsSigStrikesatt = 0    Red_HeadTotalStrikesldd = 0    Red_HeadTotalStrikesatt = 0    Blue_HeadTotalStrikesldd = 0    Blue_HeadTotalStrikesatt = 0    Red_BodyTotalStrikesldd = 0    Red_BodyTotalStrikesatt = 0    Blue_BodyTotalStrikesldd = 0    Blue_BodyTotalStrikesatt = 0    Red_LegsTotalStrikesldd = 0    Red_LegsTotalStrikesatt = 0    Blue_LegsTotalStrikesldd = 0    Blue_LegsTotalStrikesatt = 0    Red_DisHeadStrikesldd = 0    Red_DisHeadStrikesatt = 0    Blue_DisHeadStrikesatt = 0    Blue_DisHeadStrikesldd = 0    Red_DisBodyStrikesldd = 0    Red_DisBodyStrikesatt = 0    Blue_DisBodyStrikesatt = 0    Blue_DisBodyStrikesldd = 0    Red_DisLegsStrikesldd = 0    Red_DisLegsStrikesatt = 0    Blue_DisLegsStrikesatt = 0    Blue_DisLegsStrikesldd = 0    Red_ClinchHeadStrikesldd = 0    Red_ClinchHeadStrikesatt = 0    Blue_ClinchHeadStrikesatt = 0    Blue_ClinchHeadStrikesldd = 0    Red_ClinchBodyStrikesldd = 0    Red_ClinchBodyStrikesatt = 0    Blue_ClinchBodyStrikesatt = 0    Blue_ClinchBodyStrikesldd = 0    Red_ClinchLegsStrikesldd = 0    Red_ClinchLegsStrikesatt = 0    Blue_ClinchLegsStrikesatt = 0    Blue_ClinchLegsStrikesldd = 0    Red_GroundHeadStrikesldd = 0    Red_GroundHeadStrikesatt = 0    Blue_GroundHeadStrikesatt = 0    Blue_GroundHeadStrikesldd = 0    Red_GroundBodyStrikesldd = 0    Red_GroundBodyStrikesatt = 0    Blue_GroundBodyStrikesatt = 0    Blue_GroundBodyStrikesldd = 0    Red_GroundLegsStrikesldd = 0    Red_GroundLegsStrikesatt = 0    Blue_GroundLegsStrikesatt = 0    Blue_GroundLegsStrikesldd = 0    Red_DisHeadKicksldd = 0    Red_DisHeadKicksatt = 0    Blue_DisHeadKicksatt = 0    Blue_DisHeadKicksldd = 0    Red_DisBodyKicksldd = 0    Red_DisBodyKicksatt = 0    Blue_DisBodyKicksatt = 0    Blue_DisBodyKicksldd = 0    Red_DisLegKicksldd = 0    Red_DisLegKicksatt = 0    Blue_DisLegKicksatt = 0    Blue_DisLegKicksldd = 0    Red_DisHeadPunchesldd = 0    Red_DisHeadPunchesatt = 0    Blue_DisHeadPunchesatt = 0    Blue_DisHeadPunchesldd = 0    Red_DisBodyPunchesldd = 0    Red_DisBodyPunchesatt = 0    Blue_DisBodyPunchesatt = 0    Blue_DisBodyPunchesldd = 0    Red_ClinchSigKicksldd = 0    Red_ClinchSigKicksatt = 0    Blue_ClinchSigKicksatt = 0    Blue_ClinchSigKicksldd = 0    Red_ClinchSigPunchesldd = 0    Red_ClinchSigPunchesatt = 0    Blue_ClinchSigPunchesatt = 0    Blue_ClinchSigPunchesldd = 0    Red_GroundSigPunchesldd = 0    Red_GroundSigPunchesatt = 0    Blue_GroundSigPunchesatt = 0    Blue_GroundSigPunchesldd = 0    Red_GroundSigKicksldd = 0    Red_GroundSigKicksatt = 0    Blue_GroundSigKicksatt = 0    Blue_GroundSigKicksldd = 0    Red_TDGraplingldd = 0    Red_TDGraplingatt = 0    Blue_TDGraplingatt = 0    Blue_TDGraplingldd = 0    Red_SubGraplingatt = 0    Blue_SubGraplingatt = 0    Red_RevGraplingldd = 0    Blue_RevGraplingldd = 0    Red_StandupsGraplingldd = 0    Blue_StandupsGraplingldd = 0    url = 'https://www.ufc.com{}'.format(link)    try:        resp = requests.get(url)    except timeout:        return    response = scrapy.Selector(text=resp.content.decode('utf-8'))    number = response.css('.c-listing-ticker--footer ::attr(data-fmid)').extract_first('')    if number == '':        return    second_number = link.split('#')[1]    if second_number == '':        return    url = 'https://www.ufc.com/matchup/{}/{}/post'.format(number, second_number)    link_new=link.split('#')[0]    data_fmid=link.split('#')[1]    url_1='https://www.ufc.com{}'.format(link_new)    try:        resp_new=requests.get(url_1)    except timeout:        return    response_new=scrapy.Selector(text=resp_new.content.decode('utf-8'))    try:        resp = requests.get(url)    except timeout:        return    response = scrapy.Selector(text=resp.content.decode('utf-8'))    item = dict()    for div in response_new.css('.c-listing-fight'):        if(div.css('::attr(data-fmid)').extract_first()==data_fmid):            item['odds 1']=div.css('.c-listing-fight__odds-amount ::text').extract_first()            item['odds 2']=div.css('.c-listing-fight__odds-amount ::text').extract()[1]            break    item['name'] = name.strip()    # if item['name'].strip() != item['Fighter 1'].strip() and item['name'].strip() != item['Fighter 2'].strip():    #     return    url = 'https://dvk92099qvr17.cloudfront.net/V2/{}/{}/Stats.json'.format(number, second_number)    url2='https://dvk92099qvr17.cloudfront.net/V1/{}/Fnt.json'.format(number)    logging.warning(url)    print(url)    print(url2)    try:        resp = requests.get(url)    except timeout:        return    try:        resp2=requests.get(url2)    except timeout:        return    try:        data = json.loads(resp.content.decode('utf-8'))    except ValueError:        return    if fid not in fights:        if fid!= '':            fights.append(fid)        else:            print('no fid')    else:        return    try:        data2 = json.loads(resp2.content.decode('utf-8'))    except ValueError:        return    for da in get_dict_value(data2, ['FMLiveFeed', 'Fights']):        if(str(da.get('FightID'))==second_number):            item['method victory'] = da.get('Method')            if da.get('Fighters')[0].get('Outcome')=="Win":                item['Winner']=da.get('Fighters')[0].get('Color') +' '+ da.get('Fighters')[0].get('Outcome')+'s'            elif da.get('Fighters')[1].get('Outcome')=="Win":                item['Winner'] = da.get('Fighters')[1].get('Color') +' '+ da.get('Fighters')[1].get('Outcome')+'s'            else:                item['Winner'] = 'Draw'            item['Fighter 1']=da.get('Fighters')[0].get('FullName')            item['Fighter 2']=da.get('Fighters')[1].get('FullName')            item['Blue Corner']=item['Fighter 1']            item['Red Corner']=item['Fighter 2']    item['Match_Date'] = get_dict_value(data, ['Timestamp']).split(' ')[1]    item['EventId'] = get_dict_value(data, ['FMLiveFeed', 'EventID'])    item['FightId'] = get_dict_value(data, ['FMLiveFeed', 'FightID'])    item['CurrentRound'] = get_dict_value(data, ['FMLiveFeed', 'CurrentRound'])    item['MaxRounds'] = get_dict_value(data, ['FMLiveFeed', 'MaxRounds'])    item['CurrentRoundTime'] = get_dict_value(data, ['FMLiveFeed', 'CurrentRoundTime'])    item['Status'] = get_dict_value(data, ['FMLiveFeed', 'Status'])    item['Accolade'] = get_dict_value(data, ['FMLiveFeed', 'Accolade'])    item['Referee'] = get_dict_value(data, ['FMLiveFeed', 'Referee'])    item['WeightClass'] = get_dict_value(data, ['FMLiveFeed', 'WeightClass'])    item['FightersRedName'] = get_dict_value(data, ['FMLiveFeed', 'Fighters', 'Red', 'Name'])    item['FightersRedID'] = get_dict_value(data, ['FMLiveFeed', 'Fighters', 'Red', 'FighterID'])    item['FightersBlueName'] = get_dict_value(data, ['FMLiveFeed', 'Fighters', 'Blue', 'Name'])    item['FightersBlueID'] = get_dict_value(data, ['FMLiveFeed', 'Fighters', 'Blue', 'FighterID'])    for key, round in get_dict_value(data, ['FMLiveFeed', 'RoundStats']).items():        Red_KD = Red_KD + str_int(get_dict_value(round, ['Red', 'Strikes', 'Knock Down', 'Landed']))        Blue_KD = Blue_KD + str_int(get_dict_value(round, ['BLUE', 'Strikes', 'Knock Down', 'Landed']))        Red_sigstrikesldd = Red_sigstrikesldd + str_int(            get_dict_value(round, ['Red', 'Strikes', 'Significant Strikes', 'Landed']))        Red_sigstrikesatt = Red_sigstrikesatt + str_int(            get_dict_value(round, ['Red', 'Strikes', 'Significant Strikes', 'Attempts']))        Blue_sigstrikesldd = Blue_sigstrikesldd + str_int(            get_dict_value(round, ['Blue', 'Strikes', 'Significant Strikes', 'Landed']))        Blue_sigstrikesatt = Blue_sigstrikesatt + str_int(            get_dict_value(round, ['Blue', 'Strikes', 'Significant Strikes', 'Attempts']))        Red_totalstrikesldd = Red_totalstrikesldd + str_int(            get_dict_value(round, ['Red', 'Strikes', 'Total Strikes', 'Landed']))        Red_totalstrikesatt = Red_totalstrikesatt + str_int(            get_dict_value(round, ['Red', 'Strikes', 'Total Strikes', 'Attempts']))        Blue_totalstrikesldd = Blue_totalstrikesldd + str_int(            get_dict_value(round, ['Blue', 'Strikes', 'Total Strikes', 'Landed']))        Blue_totalstrikesatt = Blue_totalstrikesatt + str_int(            get_dict_value(round, ['Blue', 'Strikes', 'Total Strikes', 'Attempts']))        Red_Punchldd = Red_Punchldd + str_int(get_dict_value(round, ['Red', 'Strikes', 'Punches', 'Landed']))        Red_Punchatt = Red_Punchatt + str_int(get_dict_value(round, ['Red', 'Strikes', 'Punches', 'Attempts']))        Blue_Punchldd = Blue_Punchldd + str_int(get_dict_value(round, ['Blue', 'Strikes', 'Punches', 'Landed']))        Blue_Punchatt = Blue_Punchatt + str_int(get_dict_value(round, ['Blue', 'Strikes', 'Punches', 'Attempts']))        Red_Kicksldd = Red_Kicksldd + str_int(get_dict_value(round, ['Red', 'Strikes', 'Kicks', 'Landed']))        Red_Kicksatt = Red_Kicksatt + str_int(get_dict_value(round, ['Red', 'Strikes', 'Kicks', 'Attempts']))        Blue_Kicksldd = Blue_Kicksldd + str_int(get_dict_value(round, ['Blue', 'Strikes', 'Kicks', 'Landed']))        Blue_Kicksatt = Blue_Kicksatt + str_int(get_dict_value(round, ['Blue', 'Strikes', 'Kicks', 'Attempts']))        Red_Distanceldd = Red_Distanceldd + str_int(            get_dict_value(round, ['Red', 'Strikes', 'Distance Strikes', 'Landed']))        Red_Distanceatt = Red_Distanceatt + str_int(            get_dict_value(round, ['Red', 'Strikes', 'Distance Strikes', 'Attempts']))        blue_Distanceldd = blue_Distanceldd + str_int(            get_dict_value(round, ['Blue', 'Strikes', 'Distance Strikes', 'Landed']))        blue_Distanceatt = blue_Distanceatt + str_int(            get_dict_value(round, ['Blue', 'Strikes', 'Distance Strikes', 'Attempts']))        Red_ClinchSigStrikesldd = Red_ClinchSigStrikesldd + str_int(            get_dict_value(round, ['Red', 'Strikes', 'Clinch Significant Strikes', 'Landed']))        Red_ClinchSigStrikesatt = Red_ClinchSigStrikesatt + str_int(            get_dict_value(round, ['Red', 'Strikes', 'Clinch Significant Strikes', 'Attempts']))        Blue_ClinchSigStrikesatt = Blue_ClinchSigStrikesatt + str_int(            get_dict_value(round, ['Blue', 'Strikes', 'Clinch Significant Strikes', 'Attempts']))        Blue_ClinchSigStrikesldd = Blue_ClinchSigStrikesldd + str_int(            get_dict_value(round, ['Blue', 'Strikes', 'Clinch Significant Strikes', 'Landed']))        Red_GroundSigStrikesldd = Red_GroundSigStrikesldd + str_int(            get_dict_value(round, ['Red', 'Strikes', 'Ground Significant Strikes', 'Landed']))        Blue_GroundSigStrikesldd = Blue_GroundSigStrikesldd + str_int(            get_dict_value(round, ['Blue', 'Strikes', 'Ground Significant Strikes', 'Landed']))        Red_GroundSigStrikesatt = Red_GroundSigStrikesatt + str_int(            get_dict_value(round, ['Red', 'Strikes', 'Ground Significant Strikes', 'Attempts']))        Blue_GroundSigStrikesatt = Blue_GroundSigStrikesatt + str_int(            get_dict_value(round, ['Blue', 'Strikes', 'Ground Significant Strikes', 'Attempts']))        Red_ClinchTotalStrikesldd = Red_ClinchTotalStrikesldd + str_int(            get_dict_value(round, ['Red', 'Strikes', 'Clinch Total Strikes', 'Landed']))        Red_ClinchTotalStrikesatt = Red_ClinchTotalStrikesatt + str_int(            get_dict_value(round, ['Red', 'Strikes', 'Clinch Total Strikes', 'Attempts']))        Blue_ClinchTotalStrikesldd = Blue_ClinchTotalStrikesldd + str_int(            get_dict_value(round, ['Blue', 'Strikes', 'Clinch Total Strikes', 'Landed']))        Blue_ClinchTotalStrikesatt = Blue_ClinchTotalStrikesatt + str_int(            get_dict_value(round, ['Blue', 'Strikes', 'Clinch Total Strikes', 'Attempts']))        Red_GroundTotalStrikesldd = Red_GroundTotalStrikesldd + str_int(            get_dict_value(round, ['Red', 'Strikes', 'Ground Total Strikes', 'Landed']))        Red_GroundTotalStrikesatt = Red_GroundTotalStrikesatt + str_int(            get_dict_value(round, ['Red', 'Strikes', 'Ground Total Strikes', 'Attempts']))        Blue_GroundTotalStrikesatt = Blue_GroundTotalStrikesatt + str_int(            get_dict_value(round, ['Blue', 'Strikes', 'Ground Total Strikes', 'Attempts']))        Blue_GroundTotalStrikesldd = Blue_GroundTotalStrikesldd + str_int(            get_dict_value(round, ['Blue', 'Strikes', 'Ground Total Strikes', 'Landed']))        Red_HeadSigStrikesldd = Red_HeadSigStrikesldd + str_int(            get_dict_value(round, ['Red', 'Strikes', 'Head Significant Strikes', 'Landed']))        Red_HeadSigStrikesatt = Red_HeadSigStrikesatt + str_int(            get_dict_value(round, ['Red', 'Strikes', 'Head Significant Strikes', 'Attempts']))        Blue_HeadSigStrikesldd = Blue_HeadSigStrikesldd + str_int(            get_dict_value(round, ['Blue', 'Strikes', 'Head Significant Strikes', 'Landed']))        Blue_HeadSigStrikesatt = Blue_HeadSigStrikesatt + str_int(            get_dict_value(round, ['Blue', 'Strikes', 'Head Significant Strikes', 'Attempts']))        Red_BodySigStrikesldd = Red_BodySigStrikesldd + str_int(            get_dict_value(round, ['Red', 'Strikes', 'Body Significant Strikes', 'Landed']))        Red_BodySigStrikesatt = Red_BodySigStrikesatt + str_int(            get_dict_value(round, ['Red', 'Strikes', 'Body Significant Strikes', 'Attempts']))        Blue_BodySigStrikesldd = Blue_BodySigStrikesldd + str_int(            get_dict_value(round, ['Blue', 'Strikes', 'Body Significant Strikes', 'Landed']))        Blue_BodySigStrikesatt = Blue_BodySigStrikesatt + str_int(            get_dict_value(round, ['Blue', 'Strikes', 'Body Significant Strikes', 'Attempts']))        Red_LegsSigStrikesldd = Red_LegsSigStrikesldd + str_int(            get_dict_value(round, ['Red', 'Strikes', 'Legs Significant Strikes', 'Landed']))        Red_LegsSigStrikesatt = Red_LegsSigStrikesatt + str_int(            get_dict_value(round, ['Red', 'Strikes', 'Legs Significant Strikes', 'Attempts']))        Blue_LegsSigStrikesatt = Blue_LegsSigStrikesatt + str_int(            get_dict_value(round, ['Blue', 'Strikes', 'Legs Significant Strikes', 'Attempts']))        Blue_LegsSigStrikesldd = Blue_LegsSigStrikesldd + str_int(            get_dict_value(round, ['Blue', 'Strikes', 'Legs Significant Strikes', 'Landed']))        Red_HeadTotalStrikesldd = Red_HeadTotalStrikesldd + str_int(            get_dict_value(round, ['Red', 'Strikes', 'Head Total Strikes', 'Landed']))        Red_HeadTotalStrikesatt = Red_HeadTotalStrikesatt + str_int(            get_dict_value(round, ['Red', 'Strikes', 'Head Total Strikes', 'Attempts']))        Blue_HeadTotalStrikesldd = Blue_HeadTotalStrikesldd + str_int(            get_dict_value(round, ['Blue', 'Strikes', 'Head Total Strikes', 'Landed']))        Blue_HeadTotalStrikesatt = Blue_HeadTotalStrikesatt + str_int(            get_dict_value(round, ['Blue', 'Strikes', 'Head Total Strikes', 'Attempts']))        Red_BodyTotalStrikesldd = Red_BodyTotalStrikesldd + str_int(            get_dict_value(round, ['Red', 'Strikes', 'Body Total Strikes', 'Landed']))        Red_BodyTotalStrikesatt = Red_BodyTotalStrikesatt + str_int(            get_dict_value(round, ['Red', 'Strikes', 'Body Total Strikes', 'Attempts']))        Blue_BodyTotalStrikesldd = Blue_BodyTotalStrikesldd + str_int(            get_dict_value(round, ['Blue', 'Strikes', 'Body Total Strikes', 'Landed']))        Blue_BodyTotalStrikesatt = Blue_BodyTotalStrikesatt + str_int(            get_dict_value(round, ['Blue', 'Strikes', 'Body Total Strikes', 'Attempts']))        Red_LegsTotalStrikesldd = Red_LegsTotalStrikesldd + str_int(            get_dict_value(round, ['Red', 'Strikes', 'Legs Total Strikes', 'Landed']))        Red_LegsTotalStrikesatt = Red_LegsTotalStrikesatt + str_int(            get_dict_value(round, ['Red', 'Strikes', 'Legs Total Strikes', 'Attempts']))        Blue_LegsTotalStrikesldd = Blue_LegsTotalStrikesldd + str_int(            get_dict_value(round, ['Blue', 'Strikes', 'Legs Total Strikes', 'Landed']))        Blue_LegsTotalStrikesatt = Blue_LegsTotalStrikesatt + str_int(            get_dict_value(round, ['Blue', 'Strikes', 'Legs Total Strikes', 'Attempts']))        Red_DisHeadStrikesldd = Red_DisHeadStrikesldd + str_int(            get_dict_value(round, ['Red', 'Strikes', 'Distance Head Strikes', 'Landed']))        Red_DisHeadStrikesatt = Red_DisHeadStrikesatt + str_int(            get_dict_value(round, ['Red', 'Strikes', 'Distance Head Strikes', 'Attempts']))        Blue_DisHeadStrikesldd = Blue_DisHeadStrikesldd + str_int(            get_dict_value(round, ['Blue', 'Strikes', 'Distance Head Strikes', 'Landed']))        Blue_DisHeadStrikesatt = Blue_DisHeadStrikesatt + str_int(            get_dict_value(round, ['Blue', 'Strikes', 'Distance Head Strikes', 'Attempts']))        Red_DisBodyStrikesldd = Red_DisBodyStrikesldd + str_int(            get_dict_value(round, ['Red', 'Strikes', 'Distance Body Strikes', 'Landed']))        Red_DisBodyStrikesatt = Red_DisBodyStrikesatt + str_int(            get_dict_value(round, ['Red', 'Strikes', 'Distance Body Strikes', 'Attempts']))        Blue_DisBodyStrikesldd = Blue_DisBodyStrikesldd + str_int(            get_dict_value(round, ['Blue', 'Strikes', 'Distance Body Strikes', 'Landed']))        Blue_DisBodyStrikesatt = Blue_DisBodyStrikesatt + str_int(            get_dict_value(round, ['Blue', 'Strikes', 'Distance Body Strikes', 'Attempts']))        Red_DisLegsStrikesldd = Red_DisLegsStrikesldd + str_int(            get_dict_value(round, ['Red', 'Strikes', 'Distance Leg Strikes', 'Landed']))        Blue_DisLegsStrikesldd = Blue_DisLegsStrikesldd + str_int(            get_dict_value(round, ['Blue', 'Strikes', 'Distance Leg Strikes', 'Landed']))        Blue_DisLegsStrikesatt = Blue_DisLegsStrikesatt + str_int(            get_dict_value(round, ['Blue', 'Strikes', 'Distance Leg Strikes', 'Attempts']))        Red_DisLegsStrikesatt = Red_DisLegsStrikesatt + str_int(            get_dict_value(round, ['Red', 'Strikes', 'Distance Leg Strikes', 'Attempts']))        Red_ClinchHeadStrikesldd = Red_ClinchHeadStrikesldd + str_int(            get_dict_value(round, ['Red', 'Strikes', 'Clinch Head Strikes', 'Landed']))        Red_ClinchHeadStrikesatt = Red_ClinchHeadStrikesatt + str_int(            get_dict_value(round, ['Red', 'Strikes', 'Clinch Head Strikes', 'Attempts']))        Blue_ClinchHeadStrikesldd = Blue_ClinchHeadStrikesldd + str_int(            get_dict_value(round, ['Blue', 'Strikes', 'Clinch Head Strikes', 'Landed']))        Blue_ClinchHeadStrikesatt = Blue_ClinchHeadStrikesatt + str_int(            get_dict_value(round, ['Blue', 'Strikes', 'Clinch Head Strikes', 'Attempts']))        Red_ClinchBodyStrikesldd = Red_ClinchBodyStrikesldd + str_int(            get_dict_value(round, ['Red', 'Strikes', 'Clinch Body Strikes', 'Landed']))        Red_ClinchBodyStrikesatt = Red_ClinchBodyStrikesatt + str_int(            get_dict_value(round, ['Red', 'Strikes', 'Clinch Body Strikes', 'Attempts']))        Blue_ClinchBodyStrikesatt = Blue_ClinchBodyStrikesatt + str_int(            get_dict_value(round, ['Blue', 'Strikes', 'Clinch Body Strikes', 'Attempts']))        Blue_ClinchBodyStrikesldd = Blue_ClinchBodyStrikesldd + str_int(            get_dict_value(round, ['Blue', 'Strikes', 'Clinch Body Strikes', 'Landed']))        Red_ClinchLegsStrikesldd = Red_ClinchLegsStrikesldd + str_int(            get_dict_value(round, ['Red', 'Strikes', 'Clinch Leg Strikes', 'Landed']))        Red_ClinchLegsStrikesatt = Red_ClinchLegsStrikesatt + str_int(            get_dict_value(round, ['Red', 'Strikes', 'Clinch Leg Strikes', 'Attempts']))        Blue_ClinchLegsStrikesatt = Blue_ClinchLegsStrikesatt + str_int(            get_dict_value(round, ['Blue', 'Strikes', 'Clinch Leg Strikes', 'Attempts']))        Blue_ClinchLegsStrikesldd = Blue_ClinchLegsStrikesldd + str_int(            get_dict_value(round, ['Blue', 'Strikes', 'Clinch Leg Strikes', 'Landed']))        Red_GroundHeadStrikesldd = Red_GroundHeadStrikesldd + str_int(            get_dict_value(round, ['Red', 'Strikes', 'Ground Head Strikes', 'Landed']))        Red_GroundHeadStrikesatt = Red_GroundHeadStrikesatt + str_int(            get_dict_value(round, ['Red', 'Strikes', 'Ground Head Strikes', 'Attempts']))        Blue_GroundHeadStrikesatt = Blue_GroundHeadStrikesatt + str_int(            get_dict_value(round, ['Blue', 'Strikes', 'Ground Head Strikes', 'Attempts']))        Blue_GroundHeadStrikesldd = Blue_GroundHeadStrikesldd + str_int(            get_dict_value(round, ['Blue', 'Strikes', 'Ground Head Strikes', 'Landed']))        Red_GroundBodyStrikesldd = Red_GroundBodyStrikesldd + str_int(            get_dict_value(round, ['Red', 'Strikes', 'Ground Body Strikes', 'Landed']))        Red_GroundBodyStrikesatt = Red_GroundBodyStrikesatt + str_int(            get_dict_value(round, ['Red', 'Strikes', 'Ground Body Strikes', 'Attempts']))        Blue_GroundBodyStrikesatt = Blue_GroundBodyStrikesatt + str_int(            get_dict_value(round, ['Blue', 'Strikes', 'Ground Body Strikes', 'Attempts']))        Blue_GroundBodyStrikesldd = Blue_GroundBodyStrikesldd + str_int(            get_dict_value(round, ['Blue', 'Strikes', 'Ground Body Strikes', 'Landed']))        Red_GroundLegsStrikesldd = Red_GroundLegsStrikesldd + str_int(            get_dict_value(round, ['Red', 'Strikes', 'Ground Leg Strikes', 'Landed']))        Red_GroundLegsStrikesatt = Red_GroundLegsStrikesatt + str_int(            get_dict_value(round, ['Red', 'Strikes', 'Ground Leg Strikes', 'Attempts']))        Blue_GroundLegsStrikesatt = Blue_GroundLegsStrikesatt + str_int(            get_dict_value(round, ['Blue', 'Strikes', 'Ground Leg Strikes', 'Attempts']))        Blue_GroundLegsStrikesldd = Blue_GroundLegsStrikesldd + str_int(            get_dict_value(round, ['Blue', 'Strikes', 'Ground Leg Strikes', 'Landed']))        Red_DisHeadKicksldd = Red_DisHeadKicksldd + str_int(            get_dict_value(round, ['Red', 'Strikes', 'Distance Head Kicks', 'Landed']))        Red_DisHeadKicksatt = Red_DisHeadKicksatt + str_int(            get_dict_value(round, ['Red', 'Strikes', 'Distance Head Kicks', 'Attempts']))        Blue_DisHeadKicksatt = Blue_DisHeadKicksatt + str_int(            get_dict_value(round, ['Blue', 'Strikes', 'Distance Head Kicks', 'Attempts']))        Blue_DisHeadKicksldd = Blue_DisHeadKicksldd + str_int(            get_dict_value(round, ['Blue', 'Strikes', 'Distance Head Kicks', 'Landed']))        Red_DisBodyKicksldd = Red_DisBodyKicksldd + str_int(            get_dict_value(round, ['Red', 'Strikes', 'Distance Body Kicks', 'Landed']))        Red_DisBodyKicksatt = Red_DisBodyKicksatt + str_int(            get_dict_value(round, ['Red', 'Strikes', 'Distance Body Kicks', 'Attempts']))        Blue_DisBodyKicksldd = Blue_DisBodyKicksldd + str_int(            get_dict_value(round, ['Blue', 'Strikes', 'Distance Body Kicks', 'Landed']))        Blue_DisBodyKicksatt = Blue_DisBodyKicksatt + str_int(            get_dict_value(round, ['Blue', 'Strikes', 'Distance Body Kicks', 'Attempts']))        Red_DisLegKicksldd = Red_DisLegKicksldd + str_int(            get_dict_value(round, ['Red', 'Strikes', 'Distance Leg Kicks', 'Landed']))        Red_DisLegKicksatt = Red_DisLegKicksatt + str_int(            get_dict_value(round, ['Red', 'Strikes', 'Distance Leg Kicks', 'Attempts']))        Blue_DisLegKicksatt = Blue_DisLegKicksatt + str_int(            get_dict_value(round, ['Blue', 'Strikes', 'Distance Leg Kicks', 'Attempts']))        Blue_DisLegKicksldd = Blue_DisLegKicksldd + str_int(            get_dict_value(round, ['Blue', 'Strikes', 'Distance Leg Kicks', 'Landed']))        Red_DisHeadPunchesldd = Red_DisHeadPunchesldd + str_int(            get_dict_value(round, ['Red', 'Strikes', 'Distance Head Punches', 'Landed']))        Red_DisHeadPunchesatt = Red_DisHeadPunchesatt + str_int(            get_dict_value(round, ['Red', 'Strikes', 'Distance Head Punches', 'Attempts']))        Blue_DisHeadPunchesatt = Blue_DisHeadPunchesatt + str_int(            get_dict_value(round, ['Blue', 'Strikes', 'Distance Head Punches', 'Attempts']))        Blue_DisHeadPunchesldd = Blue_DisHeadPunchesldd + str_int(            get_dict_value(round, ['Blue', 'Strikes', 'Distance Head Punches', 'Landed']))        Red_DisBodyPunchesldd = Red_DisBodyPunchesldd + str_int(            get_dict_value(round, ['Red', 'Strikes', 'Distance Body Punches', 'Landed']))        Red_DisBodyPunchesatt = Red_DisBodyPunchesatt + str_int(            get_dict_value(round, ['Red', 'Strikes', 'Distance Body Punches', 'Attempts']))        Blue_DisBodyPunchesatt = Blue_DisBodyPunchesatt + str_int(            get_dict_value(round, ['Blue', 'Strikes', 'Distance Body Punches', 'Attempts']))        Blue_DisBodyPunchesldd = Blue_DisBodyPunchesldd + str_int(            get_dict_value(round, ['Blue', 'Strikes', 'Distance Body Punches', 'Landed']))        Red_ClinchSigKicksldd = Red_ClinchSigKicksldd + str_int(            get_dict_value(round, ['Red', 'Strikes', 'Clinch Significant Kicks', 'Landed']))        Red_ClinchSigKicksatt = Red_ClinchSigKicksatt + str_int(            get_dict_value(round, ['Red', 'Strikes', 'Clinch Significant Kicks', 'Attempts']))        Blue_ClinchSigKicksatt = Blue_ClinchSigKicksatt + str_int(            get_dict_value(round, ['Blue', 'Strikes', 'Clinch Significant Kicks', 'Attempts']))        Blue_ClinchSigKicksldd = Blue_ClinchSigKicksldd + str_int(            get_dict_value(round, ['Blue', 'Strikes', 'Clinch Significant Kicks', 'Landed']))        Red_ClinchSigPunchesldd = Red_ClinchSigPunchesldd + str_int(            get_dict_value(round, ['Red', 'Strikes', 'Clinch Significant Punches', 'Landed']))        Red_ClinchSigPunchesatt = Red_ClinchSigPunchesatt + str_int(            get_dict_value(round, ['Red', 'Strikes', 'Clinch Significant Punches', 'Attempts']))        Blue_ClinchSigPunchesatt = Blue_ClinchSigPunchesatt + str_int(            get_dict_value(round, ['Blue', 'Strikes', 'Clinch Significant Punches', 'Attempts']))        Blue_ClinchSigPunchesldd = Blue_ClinchSigPunchesldd + str_int(            get_dict_value(round, ['Blue', 'Strikes', 'Clinch Significant Punches', 'Landed']))        Red_GroundSigKicksldd = Red_GroundSigKicksldd + str_int(            get_dict_value(round, ['Red', 'Strikes', 'Ground Significant Kicks', 'Landed']))        Red_GroundSigKicksatt = Red_GroundSigKicksatt + str_int(            get_dict_value(round, ['Red', 'Strikes', 'Ground Significant Kicks', 'Attempts']))        Blue_GroundSigKicksatt = Blue_GroundSigKicksatt + str_int(            get_dict_value(round, ['Blue', 'Strikes', 'Ground Significant Kicks', 'Attempts']))        Blue_GroundSigKicksldd = Blue_GroundSigKicksldd + str_int(            get_dict_value(round, ['Blue', 'Strikes', 'Ground Significant Kicks', 'Landed']))        Red_GroundSigPunchesldd = Red_GroundSigPunchesldd + str_int(            get_dict_value(round, ['Red', 'Strikes', 'Ground Significant Punches', 'Landed']))        Red_GroundSigPunchesatt = Red_GroundSigPunchesatt + str_int(            get_dict_value(round, ['Red', 'Strikes', 'Ground Significant Punches', 'Attempts']))        Blue_GroundSigPunchesatt = Blue_GroundSigPunchesatt + str_int(            get_dict_value(round, ['Blue', 'Strikes', 'Ground Significant Punches', 'Attempts']))        Blue_GroundSigPunchesldd = Blue_GroundSigPunchesldd + str_int(            get_dict_value(round, ['Blue', 'Strikes', 'Ground Significant Punches', 'Landed']))        Red_TDGraplingldd = Red_TDGraplingldd + str_int(            get_dict_value(round, ['Red', 'Grappling', 'Takedowns', 'Landed']))        Red_TDGraplingatt = Red_TDGraplingatt + str_int(            get_dict_value(round, ['Red', 'Grappling', 'Takedowns', 'Attempts']))        Blue_TDGraplingatt = Blue_TDGraplingatt + str_int(            get_dict_value(round, ['Blue', 'Grappling', 'Takedowns', 'Attempts']))        Blue_TDGraplingldd = Blue_TDGraplingldd + str_int(            get_dict_value(round, ['Blue', 'Grappling', 'Takedowns', 'Landed']))        Red_SubGraplingatt = Red_SubGraplingatt + str_int(            get_dict_value(round, ['Red', 'Grappling', 'Submissions', 'Attempts']))        Blue_SubGraplingatt = Blue_SubGraplingatt + str_int(            get_dict_value(round, ['Blue', 'Grappling', 'Submissions', 'Attempts']))        Red_RevGraplingldd = Red_RevGraplingldd + str_int(            get_dict_value(round, ['Red', 'Grappling', 'Reversals', 'Landed']))        Blue_RevGraplingldd = Blue_RevGraplingldd + str_int(            get_dict_value(round, ['Blue', 'Grappling', 'Reversals', 'Landed']))        Red_StandupsGraplingldd = Red_StandupsGraplingldd + str_int(            get_dict_value(round, ['Red', 'Grappling', 'Standups', 'Landed']))        Blue_StandupsGraplingldd = Blue_StandupsGraplingldd + str_int(            get_dict_value(round, ['Blue', 'Grappling', 'Standups', 'Landed']))    item['Red_KD'] = Red_KD    item['Blue_KD'] = Blue_KD    item['Red_SigStrikeldd'] = Red_sigstrikesldd    item['Red_SigStrikeatt'] = Red_sigstrikesatt    item['Blue_SigStrikeldd'] = Blue_sigstrikesldd    item['Blue_SigStrikeatt'] = Blue_sigstrikesatt    item['Red_totalstrikesldd'] = Red_totalstrikesldd    item['Red_totalstrikesatt'] = Red_totalstrikesatt    item['Blue_totalstrikesldd'] = Blue_totalstrikesldd    item['Blue_totalstrikesatt'] = Blue_totalstrikesatt    item['Blue_totalstrikesatt'] = Blue_totalstrikesatt    item['Red_Punchldd'] = Red_Punchldd    item['Red_Punchatt'] = Red_Punchatt    item['Blue_Punchldd'] = Blue_Punchldd    item['Blue_Punchatt'] = Blue_Punchatt    item['Red_Kicksldd'] = Red_Kicksldd    item['Blue_Kicksldd'] = Blue_Kicksldd    item['Red_Kicksatt'] = Red_Kicksatt    item['Blue_Kicksatt'] = Blue_Kicksatt    item['Red_Distanceldd'] = Red_Distanceldd    item['Red_Distanceatt'] = Red_Distanceatt    item['blue_Distanceldd'] = blue_Distanceldd    item['blue_Distanceatt'] = blue_Distanceatt    item['Red_ClinchSigStrikesldd'] = Red_ClinchSigStrikesldd    item['Red_ClinchSigStrikesatt'] = Red_ClinchSigStrikesatt    item['Blue_ClinchSigStrikesldd'] = Blue_ClinchSigStrikesldd    item['Blue_ClinchSigStrikesatt'] = Blue_ClinchSigStrikesatt    item['Red_GroundSigStrikesldd'] = Red_GroundSigStrikesldd    item['Red_GroundSigStrikesatt'] = Red_GroundSigStrikesatt    item['Blue_GroundSigStrikesldd'] = Blue_GroundSigStrikesldd    item['Blue_GroundSigStrikesatt'] = Blue_GroundSigStrikesatt    item['Red_ClinchTotalStrikesldd'] = Red_ClinchTotalStrikesldd    item['Red_ClinchTotalStrikesatt'] = Red_ClinchTotalStrikesatt    item['Blue_ClinchTotalStrikesldd'] = Blue_ClinchTotalStrikesldd    item['Blue_ClinchTotalStrikesatt'] = Blue_ClinchTotalStrikesatt    item['Red_GroundTotalStrikesldd'] = Red_GroundTotalStrikesldd    item['Red_GroundTotalStrikesatt'] = Red_GroundTotalStrikesatt    item['Blue_GroundTotalStrikesldd'] = Blue_GroundTotalStrikesldd    item['Blue_GroundTotalStrikesatt'] = Blue_GroundTotalStrikesatt    item['Red_HeadSigStrikesldd'] = Red_HeadSigStrikesldd    item['Red_HeadSigStrikesatt'] = Red_HeadSigStrikesatt    item['Blue_HeadSigStrikesatt'] = Blue_HeadSigStrikesatt    item['Blue_HeadSigStrikesldd'] = Blue_HeadSigStrikesldd    item['Red_BodySigStrikesldd'] = Red_BodySigStrikesldd    item['Red_BodySigStrikesatt'] = Red_BodySigStrikesatt    item['Blue_BodySigStrikesldd'] = Blue_BodySigStrikesldd    item['Blue_BodySigStrikesatt'] = Blue_BodySigStrikesatt    item['Red_LegsSigStrikesldd'] = Red_LegsSigStrikesldd    item['Red_LegsSigStrikesatt'] = Red_LegsSigStrikesatt    item['Blue_LegsSigStrikesldd'] = Blue_LegsSigStrikesldd    item['Blue_LegsSigStrikesatt'] = Blue_LegsSigStrikesatt    item['Red_HeadTotalStrikesldd'] = Red_HeadTotalStrikesldd    item['Red_HeadTotalStrikesatt'] = Red_HeadTotalStrikesatt    item['Blue_HeadTotalStrikesldd'] = Blue_HeadTotalStrikesldd    item['Blue_HeadTotalStrikesatt'] = Blue_HeadTotalStrikesatt    item['Red_BodyTotalStrikesldd'] = Red_BodyTotalStrikesldd    item['Red_BodyTotalStrikesatt'] = Red_BodyTotalStrikesatt    item['Blue_BodyTotalStrikesldd'] = Blue_BodyTotalStrikesldd    item['Blue_BodyTotalStrikesatt'] = Blue_BodyTotalStrikesatt    item['Red_LegsTotalStrikesldd'] = Red_LegsTotalStrikesldd    item['Red_LegsTotalStrikesatt'] = Red_LegsTotalStrikesatt    item['Blue_LegsTotalStrikesldd'] = Blue_LegsTotalStrikesldd    item['Blue_LegsTotalStrikesatt'] = Blue_LegsTotalStrikesatt    item['Red_DisHeadStrikesldd'] = Red_DisHeadStrikesldd    item['Red_DisHeadStrikesatt'] = Red_DisHeadStrikesatt    item['Blue_DisHeadStrikesatt'] = Blue_DisHeadStrikesatt    item['Blue_DisHeadStrikesldd'] = Blue_DisHeadStrikesldd    item['Red_DisBodyStrikesldd'] = Red_DisBodyStrikesldd    item['Red_DisBodyStrikesatt'] = Red_DisBodyStrikesatt    item['Blue_DisBodyStrikesatt'] = Blue_DisBodyStrikesatt    item['Blue_DisBodyStrikesldd'] = Blue_DisBodyStrikesldd    item['Red_DisLegsStrikesldd'] = Red_DisLegsStrikesldd    item['Red_DisLegsStrikesatt'] = Red_DisLegsStrikesatt    item['Blue_DisLegsStrikesatt'] = Blue_DisLegsStrikesatt    item['Blue_DisLegsStrikesldd'] = Blue_DisLegsStrikesldd    item['Red_ClinchHeadStrikesldd'] = Red_ClinchHeadStrikesldd    item['Red_ClinchHeadStrikesatt'] = Red_ClinchHeadStrikesatt    item['Blue_ClinchHeadStrikesatt'] = Blue_ClinchHeadStrikesatt    item['Blue_ClinchHeadStrikesldd'] = Blue_ClinchHeadStrikesldd    item['Red_ClinchBodyStrikesldd'] = Red_ClinchBodyStrikesldd    item['Red_ClinchBodyStrikesatt'] = Red_ClinchBodyStrikesatt    item['Blue_ClinchBodyStrikesatt'] = Blue_ClinchBodyStrikesatt    item['Blue_ClinchBodyStrikesldd'] = Blue_ClinchBodyStrikesldd    item['Red_ClinchLegsStrikesldd'] = Red_ClinchLegsStrikesldd    item['Red_ClinchLegsStrikesatt'] = Red_ClinchLegsStrikesatt    item['Blue_ClinchLegsStrikesatt'] = Blue_ClinchLegsStrikesatt    item['Blue_ClinchLegsStrikesldd'] = Blue_ClinchLegsStrikesldd    item['Red_GroundHeadStrikesldd'] = Red_GroundHeadStrikesldd    item['Red_GroundHeadStrikesatt'] = Red_GroundHeadStrikesatt    item['Blue_GroundHeadStrikesatt'] = Blue_GroundHeadStrikesatt    item['Blue_GroundHeadStrikesldd'] = Blue_GroundHeadStrikesldd    item['Red_GroundBodyStrikesldd'] = Red_GroundBodyStrikesldd    item['Red_GroundBodyStrikesatt'] = Red_GroundBodyStrikesatt    item['Blue_GroundBodyStrikesatt'] = Blue_GroundBodyStrikesatt    item['Blue_GroundBodyStrikesldd'] = Blue_GroundBodyStrikesldd    item['Red_GroundLegsStrikesldd'] = Red_GroundLegsStrikesldd    item['Red_GroundLegsStrikesatt'] = Red_GroundLegsStrikesatt    item['Blue_GroundLegsStrikesatt'] = Blue_GroundLegsStrikesatt    item['Blue_GroundLegsStrikesldd'] = Blue_GroundLegsStrikesldd    item['Red_DisHeadKicksldd'] = Red_DisHeadKicksldd    item['Red_DisHeadKicksatt'] = Red_DisHeadKicksatt    item['Blue_DisHeadKicksatt'] = Blue_DisHeadKicksatt    item['Blue_DisHeadKicksldd'] = Blue_DisHeadKicksldd    item['Red_DisBodyKicksldd'] = Red_DisBodyKicksldd    item['Red_DisBodyKicksatt'] = Red_DisBodyKicksatt    item['Blue_DisBodyKicksatt'] = Blue_DisBodyKicksatt    item['Blue_DisBodyKicksldd'] = Blue_DisBodyKicksldd    item['Red_DisLegKicksldd'] = Red_DisLegKicksldd    item['Red_DisLegKicksatt'] = Red_DisLegKicksatt    item['Blue_DisLegKicksatt'] = Blue_DisLegKicksatt    item['Blue_DisLegKicksldd'] = Blue_DisLegKicksldd    item['Red_DisHeadPunchesldd'] = Red_DisHeadPunchesldd    item['Red_DisHeadPunchesatt'] = Red_DisHeadPunchesatt    item['Blue_DisHeadPunchesatt'] = Blue_DisHeadPunchesatt    item['Blue_DisHeadPunchesldd'] = Blue_DisHeadPunchesldd    item['Red_DisBodyPunchesldd'] = Red_DisBodyPunchesldd    item['Red_DisBodyPunchesatt'] = Red_DisBodyPunchesatt    item['Blue_DisBodyPunchesatt'] = Blue_DisBodyPunchesatt    item['Blue_DisBodyPunchesldd'] = Blue_DisBodyPunchesldd    item['Red_ClinchSigKicksldd'] = Red_ClinchSigKicksldd    item['Red_ClinchSigKicksatt'] = Red_ClinchSigKicksatt    item['Blue_ClinchSigKicksatt'] = Blue_ClinchSigKicksatt    item['Blue_ClinchSigKicksldd'] = Blue_ClinchSigKicksldd    item['Red_ClinchSigPunchesldd'] = Red_ClinchSigPunchesldd    item['Red_ClinchSigPunchesatt'] = Red_ClinchSigPunchesatt    item['Blue_ClinchSigPunchesatt'] = Blue_ClinchSigPunchesatt    item['Blue_ClinchSigPunchesldd'] = Blue_ClinchSigPunchesldd    item['Red_GroundSigPunchesldd'] = Red_GroundSigPunchesldd    item['Red_GroundSigPunchesatt'] = Red_GroundSigPunchesatt    item['Blue_GroundSigPunchesatt'] = Blue_GroundSigPunchesatt    item['Blue_GroundSigPunchesldd'] = Blue_GroundSigPunchesldd    item['Red_GroundSigKicksldd'] = Red_GroundSigKicksldd    item['Red_GroundSigKicksatt'] = Red_GroundSigKicksatt    item['Blue_GroundSigKicksatt'] = Blue_GroundSigKicksatt    item['Blue_GroundSigKicksldd'] = Blue_GroundSigKicksldd    item['Red_TDGraplingldd'] = Red_TDGraplingldd    item['Red_TDGraplingatt'] = Red_TDGraplingatt    item['Blue_TDGraplingatt'] = Blue_TDGraplingatt    item['Blue_TDGraplingldd'] = Blue_TDGraplingldd    item['Red_SubGraplingatt'] = Red_SubGraplingatt    item['Blue_SubGraplingatt'] = Blue_SubGraplingatt    item['Red_RevGraplingldd'] = Red_RevGraplingldd    item['Blue_RevGraplingldd'] = Blue_RevGraplingldd    item['Red_StandupsGraplingldd'] = Red_StandupsGraplingldd    item['Blue_StandupsGraplingldd'] = Blue_StandupsGraplingldd    writer.writerow(item)    csv_file.flush()    # item = json.dumps({'event_date': event_date, 'scraped_item': item, 'api_data': data})    #    # f.write(item)    #    # f.write('\n')def get_single_player(link, name):    """    This function get all fight links from an athlete's profile page    :param link: athlete profile link    :param name: name of athlete    :return:    """    url = 'https://www.ufc.com/views/ajax?_wrapper_format=drupal_ajax'    data = copy.deepcopy(fights_data_template)    data['view_path'] = link    page = 1    links = []    try:        resp = requests.get('https://www.ufc.com{}'.format(link))    except:        try:            resp = requests.get('https://www.ufc.com{}'.format(link))        except:            return []    response = scrapy.Selector(text=resp.content.decode('utf-8'))    try:        json_data = json.loads(response.css('script[type="application/json"] ::text').extract_first())    except ValueError:        return    view_args = json_data['path']['currentPath'].replace('node/', '')    view_args = '{}/{}'.format(view_args, view_args)    data['view_args'] = view_args    all_links = response.css('.e-button--white ::attr(href)').extract()    event_dates = response.css('time ::attr(datetime)').extract()    links.extend([l for l in all_links if '/event' in l])    while True:        data['page'] = str(page)        page += 1        try:            resp = requests.post(url, headers=headers, data=data)        except timeout:            return        try:            response_data = json.loads(resp.content.decode('utf-8'))        except ValueError:            return        response = scrapy.Selector(text=response_data[-1].get('data'))        all_links = response.css('.e-button--white ::attr(href)').extract()        links.extend([l for l in all_links if '/event' in l])        event_dates.extend(response.css('time ::attr(datetime)').extract())        if not response.css('.e-button--white ::attr(href)').extract():            break        for link, event_date in zip(links, event_dates):           try:               date_parts = event_date.split('T')[0].split('-')               event_date = '{}/{}/{}'.format(date_parts[1], date_parts[2], date_parts[0])               fightid=link.split('#')[-1]               if datetime.strptime(event_date,'%m/%d/%Y').date() > datetime.today().date():                   continue               get_fight_data(link, name, event_date,fightid)           except Exception as e:               logging.warning(str(e))               logging.warning('error on: {}'.format(link))               continuedef get_all_players():    """    this function gets profile links and names of all athletes    :return:    """    data = copy.deepcopy(data_template)    url = 'https://www.ufc.com/views/ajax?filters%5B0%5D=status%3A23&_wrapper_format=drupal_ajax'    links = []    page = 0    while True:        data['page'] = str(page)        page += 1        try:            resp = requests.post(url, headers=headers, data=data)        except timeout:            return        try:            response_data = json.loads(resp.content.decode('utf-8'))        except ValueError:            return        response = scrapy.Selector(text=response_data[-1].get('data'))        if not response.css('.e-button--black ::attr(href)').extract():            # if not response.css('.e-button--black ::attr(href)').extract() or len(links) > 10:    # if you want to extract 10 athletes data then uncomment this line and comment above line            break        for li in response.css('.c-listing-athlete-flipcard__inner'):            name = li.css('span.c-listing-athlete__name ::text').extract_first()            link = li.css('.e-button--black ::attr(href)').extract_first()            links.append([link, name])        for link in links:            get_single_player(link[0], link[1])if __name__ == '__main__':    get_all_players()