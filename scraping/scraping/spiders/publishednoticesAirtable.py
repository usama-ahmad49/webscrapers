import requests
import scrapy
from scrapy.crawler import CrawlerProcess
from seleniumwire import webdriver

import AirtableApi

basekey = 'appCpRqZ4zT3J3PKA'
apikey = 'keyFHOlT21VKJdBVi'
BASE_URL = 'https://api.airtable.com/v0'

table_name = 'publishednotices'

airtable_client = AirtableApi.AirtableClient(apikey, basekey)

headers = {
    'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9',
    'accept-language': 'en-US,en;q=0.9',
    'cache-control': 'max-age=0',
    'content-length': '26379',
    'content-type': 'application/x-www-form-urlencoded',
    'cookie': 'ASP.NET_SessionId=1nd3jkpazwuarzird0zu1fts; __utmc=29990078; __utmz=29990078.1624863009.1.1.utmcsr=(direct)|utmccn=(direct)|utmcmd=(none); __utma=29990078.1712190758.1624863009.1624873351.1624889240.3; __utmt=1; AWSALB=C3rnKaTP5dIupkh9Rbl7XxRpBKhpuTx8ftR/233MhEmldoCcsszO+u2sLdNDzgg+C4bRNxS8WWB2Ynxjh1I/0S17e4T6pLjffLZDVSGG43Z5l3xGwgRPBkKYnVfn; __atuvc=7%7C26; __atuvs=60d9d797972d432e003; __utmb=29990078.4.10.1624889240',
    'dnt': '1',
    'origin': 'https://publishednotices.asic.gov.au',
    'referer': 'https://publishednotices.asic.gov.au/browsesearch-notices',
    'sec-ch-ua': '" Not;A Brand";v="99", "Google Chrome";v="91", "Chromium";v="91"',
    'sec-ch-ua-mobile': '?0',
    'sec-fetch-dest': 'document',
    'sec-fetch-mode': 'navigate',
    'sec-fetch-site': 'same-origin',
    'sec-fetch-user': '?1',
    'upgrade-insecure-requests': '1',
    'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.114 Safari/537.36'
}

Links = []
Processed = []


class publishednoticesAirtable(scrapy.Spider):
    name = 'publishednotices'

    def start_requests(self):
        url = 'https://publishednotices.asic.gov.au/browsesearch-notices'
        driver = webdriver.Firefox()
        driver.get(url)
        driver.find_element_by_css_selector('#ContentPlaceHolderDefault_INWMasterContentPlaceHolder_INWPageContentPlaceHolder_ucNoticeResult_lvNoticeList > tbody > tr.NoticeTablePager > td > table > tbody > tr > td:nth-child(7) > a').click()
        res = scrapy.Selector(text=driver.page_source)
        driver.quit()
        lastpage = int(res.css('.NoticeTablePager table td')[-1].css('::text').extract_first())
        i = 1
        while i <= lastpage:
            formdata = {
                '__EVENTTARGET': "ctl00$ctl00$ctl00$ctl00$ContentPlaceHolderDefault$INWMasterContentPlaceHolder$INWPageContentPlaceHolder$ucNoticeResult$lvNoticeList",
                '__EVENTARGUMENT': f"Page${i}",
                '__VIEWSTATE': "",
                'ctl00$ctl00$ctl00$ctl00$ContentPlaceHolderDefault$INWMasterContentPlaceHolder$INWPageContentPlaceHolder$SearchNoticeList_3$txtCompanyNameOrACN': '',
                'ctl00$ctl00$ctl00$ctl00$ContentPlaceHolderDefault$INWMasterContentPlaceHolder$INWPageContentPlaceHolder$SearchNoticeList_3$appoint_hidden': '0',
                'ctl00$ctl00$ctl00$ctl00$ContentPlaceHolderDefault$INWMasterContentPlaceHolder$INWPageContentPlaceHolder$SearchNoticeList_3$notice_hidden': '0',
                'ctl00$ctl00$ctl00$ctl00$ContentPlaceHolderDefault$INWMasterContentPlaceHolder$INWPageContentPlaceHolder$SearchNoticeList_3$ddlNoticeStateList': 'All',
                'ctl00$ctl00$ctl00$ctl00$ContentPlaceHolderDefault$INWMasterContentPlaceHolder$INWPageContentPlaceHolder$SearchNoticeList_3$state_hidden': '0',
                'ctl00$ctl00$ctl00$ctl00$ContentPlaceHolderDefault$INWMasterContentPlaceHolder$INWPageContentPlaceHolder$SearchNoticeList_3$chkExcludeDeregistrationNotices': 'on',
                'ctl00$ctl00$ctl00$ctl00$ContentPlaceHolderDefault$INWMasterContentPlaceHolder$INWPageContentPlaceHolder$SearchNoticeList_3$txtAppointeeSolicitorName': '',
                'ctl00$ctl00$ctl00$ctl00$ContentPlaceHolderDefault$INWMasterContentPlaceHolder$INWPageContentPlaceHolder$SearchNoticeList_3$ddlDateType': '0',
                'ctl00$ctl00$ctl00$ctl00$ContentPlaceHolderDefault$INWMasterContentPlaceHolder$INWPageContentPlaceHolder$SearchNoticeList_3$txtDateTypeFrom': '',
                'ctl00$ctl00$ctl00$ctl00$ContentPlaceHolderDefault$INWMasterContentPlaceHolder$INWPageContentPlaceHolder$SearchNoticeList_3$txtDateTypeTo': '',
                '__VIEWSTATEGENERATOR': 'CA0B0334',
                '__VIEWSTATEENCRYPTED': ''
            }
            i += 1
            req = requests.post(url='https://publishednotices.asic.gov.au/browsesearch-notices', data=formdata, headers=headers)
            res = scrapy.Selector(text=req.content.decode('utf-8'))
            for link in res.css('.NoticeTable .button.plain.addurlparam::attr(href)').extract():
                Links.append(f'https://publishednotices.asic.gov.au{link}')
        for url in Links:
            yield scrapy.Request(url=url)

    def parse(self, response, **kwargs):
        item = dict()
        item['url'] = response.url
        if 'Company ' in response.css('.boxinnerbody .boxinnersub')[0].css('::text').extract_first():
            companyName =''
            ACN =''
            for res in response.css('.boxinnerbody .boxinnercontent')[0].css('.tbl tr'):
                if 'Company:' in res.css('.col1::text').extract_first():
                    companyName +=res.css('.col2::text').extract_first()+' || '
                if 'ACN:' in res.css('.col1::text').extract_first():
                    ACN += res.css('.col2::text').extract_first()+' || '
            try:
                item['CompanyName'] = companyName
            except:
                pass
            try:
                item['CompanyNumber'] = ACN
            except:
                pass

            try:
                item['Status'] = response.css('.boxinnerbody .boxinnercontent')[0].css('.tbl')[-1].css('.col2 ::text').extract_first()
            except:
                pass
            try:
                item['Appointment Date'] = response.css('.boxinnerbody .boxinnercontent')[0].css('.tbl')[-1].css('.col2 ::text').extract()[1]
            except:
                pass

        try:
            item['Notice'] = response.css('.shadow h2::text').extract_first()
        except:
            pass

        if 'Resolution' in response.css('.boxinnerbody .boxinnersub')[1].css('::text').extract_first():
            try:
                item['Liquidators'] = response.css('.boxinnerbody .boxinnercontent')[2].css('p::text').extract_first()
            except:
                pass
            try:
                item['DateCreated']=response.css('.boxinnerbody .boxinnercontent')[2].css('.tbl td.col2::text').extract_first().strip()
            except:
                pass
        if 'Appointment details' in response.css('.boxinnerbody .boxinnersub')[1].css('::text').extract_first():
            try:
                item['Administrator'] = response.css('.boxinnerbody .boxinnercontent')[1].css('.tbl .col2::text').extract_first()
            except:
                pass
        if 'proof of debt' in response.css('.boxinnerbody .boxinnersub')[1].css('::text').extract_first():
            try:
                item['Liquidators'] = response.css('.boxinnerbody .boxinnercontent')[2].css('p::text').extract_first()
            except:
                pass
            try:
                item['DateCreated']=response.css('.boxinnerbody .boxinnercontent')[2].css('.tbl td.col2::text').extract_first().strip()
            except:
                pass

        Processed.append(item)

    def close(spider, reason):
        airtable_client.insert_records(table_name, Processed)


process = CrawlerProcess({
    'USER_AGENT': "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/34.0.1847.131 Safari/537.36"})

process.crawl(publishednoticesAirtable)
process.start()
